generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  DEVOPS
  DEVELOPER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum UserStoryPriority {
  LOW
  MEDIUM
  HIGH
}

enum UserStoryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model User {
  id            String        @id @default(uuid())
  email         String?       @unique
  password      String
  displayName   String?
  role          UserRole
  photoURL      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?
  tasks         Task[]
  userStories   UserStory[]
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model Project {
  id          String      @id @default(uuid())
  name        String
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?
  tasks       Task[]
  userStories UserStory[]
}

model Task {
  id            String      @id @default(uuid())
  name          String
  description   String
  priority      TaskPriority
  status        TaskStatus
  estimatedTime Int
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?
  project       Project     @relation(fields: [projectId], references: [id])
  projectId     String
  user          User?        @relation(fields: [userId], references: [id])
  userId        String?
  userStory     UserStory?   @relation(fields: [userStoryId], references: [id])
  userStoryId   String?
}

model UserStory {
  id          String           @id @default(uuid())
  name        String
  description String
  priority    UserStoryPriority
  status      UserStoryStatus
  createdAt   DateTime         @default(now())
  updatedAt   DateTime?
  project     Project          @relation(fields: [projectId], references: [id])
  projectId   String
  user        User?         @relation(fields: [userId], references: [id])
  userId      String?
  tasks       Task[]
}
